var GlideSession = Class.create();
GlideSession.prototype = {
	
	/**
	 * Impersonate a user for the duration of the session (INCLUDING AFTER THE SCRIPT IS FINISHED RUNNING!), or until the onlineImpersonate() method is called again, with another (or the original user's) user_id.
	 * @param userID {string} The user_id OR the sys_id of the user you'd like to impersonate for this session (e.g. 'admin' or '6816f79cc0a8016401c5a33be04be441').
	 * @return The sys_id of the CURRENT user (PRE-impersonation). This can later be passed into session.onlineImpersonate() in order to reimpersonate the original session, which prevents ending up stuck in the other user's session after the script is finished running.
	 * @example
	 * var originalUserID = session.onlineImpersonate('abel_tuter');
	 * //script here, executes as the impersonated user
	 * session.onlineImpersonate(originalUser);
	 */
	onlineImpersonate: function(userID) {},
	
	//METHODS:
	setClientIP: function() {},
	setStrictQuery: function() {},
	getTimeFormat: function() {},
	addUniqueAdminLevelErrorMessage: function() {},
	setRedirect: function() {},
	setSessionID: function() {},
	getStackName: function() {},
	merge: function() {},
	setCacheFlush: function() {},
	rememberHeldMutex: function() {},
	getFullName: function() {},
	setTimeFormat: function() {},
	getRoles: function() {},
	setDomainEnabled: function() {},
	clearCategoryParms: function() {},
	jsFunction_setContextualMode: function() {},
	addAdminLevelErrorMessage: function() {},
	onlineUnimpersonate: function() {},
	jsFunction_getContextualMode: function() {},
	addUniqueMessage: function() {},
	setHttpSession: function() {},
	getClientIP: function() {},
	renameStack: function() {},
	flushEncryptionContext: function() {},
	setWatchField: function() {},
	addInfoMessage: function() {},
	toString: function() {},
	resetURI: function() {},
	clearSessionProperties: function() {},
	setDomainID: function() {},
	isInteractive: function() {},
	hasNamedMessages: function() {},
	getBooleanProperty: function() {},
	addMessage: function() {},
	getNamedMessages: function() {},
	getSessionKey: function() {},
	getStackParms: function() {},
	getUID: function() {},
	setIsEdgeEncrypted: function() {},
	getAvailableElevatedRoles: function() {},
	valueBound: function() {},
	setReturn: function() {},
	setNavMessage: function() {},
	getHttpSession: function() {},
	flushMessages: function() {},
	setCacheIgnoreFlushTable: function() {},
	isLoggedIn: function() {},
	addUniqueErrorMessage: function() {},
	getDateFormat: function() {},
	getEncryptionContext: function() {},
	isLockedOut: function() {},
	getWorkflow: function() {},
	releaseConnection: function() {},
	setIgnoredCreateElement: function() {},
	notifyAll: function() {},
	setCurrentApplicationId: function() {},
	getStackObject: function() {},
	isIgnoredCreateElement: function() {},
	hashCode: function() {},
	getCategoryParm: function() {},
	addUniqueInfoMessage: function() {},
	getSessionID: function() {},
	addTrivialMessage: function() {},
	setDateFormat: function() {},
	setWorkflowDisabled: function() {},
	setStackParm: function() {},
	setWorkflow: function() {},
	setStack: function() {},
	getBusinessRuleStack: function() {},
	setSuppressTextIndexWhenSessionWorkflowOff: function() {},
	suppressTextIndex: function() {},
	clearActiveDBs: function() {},
	setInteractive: function() {},
	setAlreadyGettingUserInThisSession: function() {},
	addNotification: function() {},
	separationEnabled: function() {},
	setUser: function() {},
	checkActiveDBs: function() {},
	putClientData: function() {},
	getClientDataMap: function() {},
	setTrackMetadataDeletes: function() {},
	suppressUpdateSynch: function() {},
	clearWatchField: function() {},
	cloneSessionProperties: function() {},
	setCategoryParm: function() {},
	setRefreshNavigator: function() {},
	wait: function() {},
	getCategoryParms: function() {},
	getCurrentDomainID: function() {},
	setRotatingSession: function() {},
	putProperty: function() {},
	notify: function() {},
	getTimeZoneName: function() {},
	getDateTimeFormat: function() {},
	addErrorMessage: function() {},
	getLanguage: function() {},
	holdsMutex: function() {},
	setSeparation: function() {},
	setCurrentApplicationIdWithoutUpdateSet: function() {},
	getIntProperty: function() {},
	equals: function() {},
	clearOpticsContext: function() {},
	establishSession: function() {},
	getTimeZone: function() {},
	clearClientData: function() {},
	getWatchField: function() {},
	getTimeZoneShortName: function() {},
	setRecordCacheSize: function() {},
	actualUserIsAdmin: function() {},
	impersonateWithDefault: function() {},
	clearProperty: function() {},
	impersonate: function() {},
	setLastUser: function() {},
	getUserName: function() {},
	setURI: function() {},
	setRunEngines: function() {},
	clearCategoryParm: function() {},
	enableDomain: function() {},
	valueUnbound: function() {},
	getStackParm: function() {},
	connectionStatus: function() {},
	hasRole: function() {},
	loadUserByID: function() {},
	setIsAllowedToBeMaint: function() {},
	setBrowserLocale: function() {},
	getURI: function() {},
	setLanguage: function() {},
	getRunEngines: function() {},
	startTransaction: function() {},
	getUser: function() {},
	setAuthedForTimeLimitedCredentials: function() {},
	setLoggedIn: function() {},
	getLoginHome: function() {},
	hasDBs: function() {},
	getProperty: function() {},
	getClientData: function() {},
	setBusinessRuleExceptionHandler: function() {},
	getActivatedElevatedRoles: function() {},
	forgetHeldMutex: function() {},
	clearBusinessRuleStack: function() {},
	setTimeZoneName: function() {},
	getStack: function() {},

//OBJECTS:
	stack: {},
	dateFormat: {},
	sessionID: {},
	clientDataMap: {},
	clientIP: {},
	timeZone: {},
	UID: {},
	businessRuleStack: {},
	language: {},
	activatedElevatedRoles: {},
	timeZoneName: {},
	encryptionContext: {},
	roles: {},
	currentDomainID: {},
	sessionKey: {},
	fullName: {},
	userName: {},
	URI: {},
	availableElevatedRoles: {},
	timeZoneShortName: {},
	stackName: {},
	watchField: {},
	httpSession: {},
	dateTimeFormat: {},
	timeFormat: {},
	user: {},

//PRIMITIVES:
	loggedIn: 'prop',
	workflowDisabled: 'prop',
	stackParm: 'prop',
	loginHome: 'prop',
	alreadyGettingUserInThisSession: 'prop',
	ignoredCreateElement: 'prop',
	currentApplicationIdWithoutUpdateSet: 'prop',
	refreshNavigator: 'prop',
	separation: 'prop',
	rotatingSession: 'prop',
	stackParms: 'prop',
	categoryParms: 'prop',
	interactive: 'prop',
	booleanProperty: 'prop',
	property: 'prop',
	runEngines: 'prop',
	lockedOut: 'prop',
	stackObject: 'prop',
	categoryParm: 'prop',
	isEdgeEncrypted: 'prop',
	domainID: 'prop',
	workflow: 'prop',
	namedMessages: 'prop',
	clientData: 'prop',
};

var session = new GlideSession();